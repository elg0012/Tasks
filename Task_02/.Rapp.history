cor.test(beren4$start_hour, beren4$sleepTime)
Nap <- which(Data[,9] == 'nap')
Nap <- which(Data[,9] == 'nap')#
Naps <-  Data [Bonus,]#
Naps
Nap <- which(Data[,9] == 'nap')#
Naps <-  Data [Nap,]#
Naps
Nap <- which(Data[,'event'] == 'nap')
Nap <- which (Data$event == 'nap')
beren4 <- which(Data[,9] == 'nap')
Naps <-  Data [Nap,]
Naps
beren4
Naps <- which(Data[,9] == 'nap')
beren4 <- Data[Naps,]
beren4
startHour <- (beren4$start_hour)#
startMin <- (beren4$start_minute)#
endHour <- (beren4$end_hour)#
endMin <- beren4$end_minute)
startHour <- (beren4$start_hour)#
startMin <- (beren4$start_minute)#
endHour <- (beren4$end_hour)#
endMin <- (beren4$end_minute)
totalNapTime <- ((endHour - start hour)*60) + (endMin - startMin)
totalNap <- ((endHour - start hour)*60) + (endMin - startMin)
beren4$sleepTime <- ((endHour - start hour)*60) + (endMin - startMin)
beren4$sleepTime <- ((endHour - start hour)*(60)) + (endMin - startMin)
en4$sleepTime <- (endHour - start hour)*(60) + (endMin - startMin)
beren4$sleepTime <- (endHour - start hour)*(60) + (endMin - startMin)
sleepTime <- (endHour - start hour)*(60) + (endMin - startMin)
sleepTime <- (endHour - starthour)*(60) + (endMin - startMin)
sleepTime <- (endHour - startHour)*(60) + (endMin - startMin)
sleepTime
sleepTime1 <- (endHour - startHour)*(60) #
sleepTime2 <- (endMin - startMin)
sleepTime1
sleepTime2
sum(sleepTime1, sleepTime2)
totalTime <- tapplu(sleepTime1, sleepTime2, sum)
totalTime <- tapply(sleepTime1, sleepTime2, sum)
totalTime
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalTime)), totalTime, type="b", pch=16, xlab="age in days", ylab="nap times in minutes")
cor.test(beren4$start_hour, beren4$totalTime)
cor.test(beren4$start_minute, beren4$totalTime)
cor.test(beren4$start_hour, beren4$totalTime)
cor(beren4$start_hour, beren4$totalTime)
cor.test(beren4$start_hour, beren4$totalTime)
startTime <- ((start_hour)*60) + start_minute
startTime <- ((startHour)*60) + startMin
startTime
cor.test(startTime, totalTime)
totalTime
startTime
cor.test(startMin, totalTime)
cor.test(startHour, totalTime)
cor.test(startTime, totalTime)
setwd('~/Desktop/Evolution/Tasks/Task_02')#
Data <- read.csv('http://jonsmitchell.com/data/beren.csv',stringsAsFactors=F)#
write.csv(Data, 'rawdata.csv', quote=F)#
Data#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)
head(Data)
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
#Data[257, 1:3]#
Feeds <- which(Data[,9] == 'bottle')#
berenMilk <- Data[Feeds,]#
head(berenMilk)
Feeds <- which(Data[,'event'] == 'bottle')#
Feeds <- which(Data$event == 'bottle')
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d" , origin = "2019-04-18")#
Data$age <- dateID[which(Data$event == 'birth')]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
head(beren)#
head(beren2)#
head(beren3)#
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)
Feeds <- which(beren3$event == "bottle")#
avgMilk <- mean (beren3$value[Feeds])#
head(avgMilk)
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)")
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
dev.off()
Naps <- which(Data[,9] == 'nap')
beren4 <- Data[Naps,]
beren4
startHour <- (beren4$start_hour)
startMin <- (beren4$start_minute)
endHour <- (beren4$end_hour)
endMin <- (beren4$end_minute)
sleepTime1 <- (endHour - startHour)*(60)
sleepTime2 <- (endMin - startMin)
sleepTime1
sleepTime2
totalTime <- tapply(sleepTime1, sleepTime2, sum)
totalTime
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalTime)), totalTime, type="b", pch=16, xlab="age in days", ylab="nap times in minutes")
plot(as.numeric(names(totalTime)), totalTime, type="b", pch=16, xlab="age in days", ylab="nap time in minutes")
startTime
startTime <- ((startHour)*60) + startMin
startTime
cor.test(startTime, totalTime)
totalDuration <- (totalTime - startTime)
cor.test(startHour, totalTime)
cor.test(startTime, totalTime)
napTime <- [10:4,5,6,7]
napTime <- c(10:4,5,6,7)
napTime
sum(napTime)
cor.test(startTime, napTime)
startTime
sum(startTime)
napTime <- (totalTime - startTime)
cor(beren4$value[Naps], beren4$age[Naps])
cor.test(beren4$value[Naps], beren4$age[Naps])
cor.test(beren4$start_hour, beren4$totalTime)
cor.test(beren4$value[Naps], beren4$totalTime[Naps])
totalTime <- tapply(sleepTime1, sleepTime2, sum)
totalTime
cor.test(startTime, beren4$totalTime[Naps])
cor.test(startTime, totalTime)
cor(startTime, totalTime)
sleepTime1
totalTime
startTime
startTime <- (startHour) + startMin/60
startTime
cor(startTime, totalTime)
totalNap <- tapply(totalTime, beren4$age, sum)
sleepTime1 <- (endHour - startHour)*(60) #
sleepTime2 <- (endMin - startMin)
sleepTime1#
sleepTime2
totalTime <- tapply(sleepTime1, sleepTime2, sum)
totalTime
totalNap <- tapply(beren4$totalTime, beren4$age, sum)
beren4
beren4 <- beren3[Naps,]
beren4
startHour <- (beren4$start_hour)#
startMin <- (beren4$start_minute)#
endHour <- (beren4$end_hour)#
endMin <- (beren4$end_minute)
startHour#
startMin#
endHour#
endMin
sleepTime <- ((endHour - startHour)*60) + (endMin - startMin)
beren4
sleepTime
beren4
beren4$sleepTime <- ((endHour - startHour)*60) + (endMin - startMin)
sleepTime
totalTime <- tapply(beren4$sleepTime, beren4$age, sum)
totalTime
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalTime)), totalTime, type"b", pch=16, xlab="age in days", ylab="nap time in minutes")
totalTime <- tapply(beren4$sleepTime, beren4$age, sum)
totalTime
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
plot(as.numeric(names(totalTime)), totalTime, type"b", pch=16, xlab="age in days", ylab="nap time in minutes")
plot(as.numeric(names(totalTime)), totalTime, type="b", pch=16, xlab="age in days", ylab="nap time in minutes")
startHour <- (beren4$start_hour)#
startMin <- (beren4$start_minute)#
endHour <- (beren4$end_hour)#
endMin <- (beren4$end_minute)
startHour#
startMin#
endHour#
endMin
sleepTime1 <- (endHour - startHour) *(60)
sleepTime2 <- (endMin - startMin)
sleepTime1#
sleetTime2
sleepTime1#
sleepTime2
totalTime <- tapply(sleepTime1, sleepTime2, sum)
totalTime
sum(totalTime)
totalNapTime <- tapplu(totalTime, beren3$age)
totalNapTime <- tapply(totalTime, beren3$age)
totalNapTime <- tapply(totalTime, beren4$age, sum)
totalNapTime <- tapply(totalTime, beren4$age[Naps], sum)
Naps <- which(Data[,'event'] == 'nap')
Naps
beren4 <- beren3[Naps,]
beren4
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d" , origin = "2019-04-18")#
Data$age <- dateID[which(Data$event == 'birth')]
startHour <- (beren4$start_hour)#
startMin <- (beren4$start_minute)#
endHour <- (beren4$end_hour)#
endMin <- (beren4$end_minute)
startHour#
startMin#
endHour#
endMin#
sleepTime1 <- (endHour - startHour) *(60)#
sleepTime2 <- (endMin - startMin)#
sleepTime1#
sleepTime2
totalTime <- tapply(sleepTime1, sleepTime2, sum)#
totalTime
totalNapTime <- tapply(totalTime, beren4$age[Naps], sum)
Naps <- which(Data[,9] == 'nap')
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d" , origin = "2019-04-18")#
Data$age <- dateID[which(Data$event == 'birth')]
startHour <- (beren4$start_hour)#
startMin <- (beren4$start_minute)#
endHour <- (beren4$end_hour)#
endMin <- (beren4$end_minute)#
startHour#
startMin#
endHour#
endMin#
sleepTime1 <- (endHour - startHour) *(60)#
sleepTime2 <- (endMin - startMin)#
sleepTime1#
sleepTime2#
totalTime <- tapply(sleepTime1, sleepTime2, sum)#
totalTime
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalTime)), totalTime, type="b", pch=16, xlab="age in days", ylab="nap time in minutes")
startTime <- (startHour*60) + startMin
startTime
cor.test(startTime, totalTime)
setwd('~/Desktop/Evolution/Tasks/Task_02')#
Data <- read.csv('http://jonsmitchell.com/data/beren.csv',stringsAsFactors=F)#
write.csv(Data, 'rawdata.csv', quote=F)#
Data#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)
head(Data)
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
#Data[257, 1:3]#
Feeds <- which(Data[,9] == 'bottle')#
berenMilk <- Data[Feeds,]#
head(berenMilk)
Feeds <- which(Data[,'event'] == 'bottle')#
Feeds <- which(Data$event == 'bottle')
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d" , origin = "2019-04-18")#
Data$age <- dateID[which(Data$event == 'birth')]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
head(beren)#
head(beren2)#
head(beren3)#
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)
Feeds <- which(beren3$event == "bottle")#
avgMilk <- mean (beren3$value[Feeds])#
head(avgMilk)
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
?cor#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)")#
?par
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
dev.off()
Poop <- which(Data[,9] == 'bowel')
Poop
head(beren3)
head(beren)
head(beren2)
Feeds
avgPoop <- mean(beren3$value[Poop])
avgPoop
varPoop <- tapply(beren3$value[Poop], beren3$age[Feeds], var)#
totalPoop <- tapply(beren3$value[Poop], beren3$age[Feeds], sum)#
numPoop <- tapply(beren3$value[Poop], beren3$age[Feeds], length)
varPoop <- tapply(beren3$value[Poop], var)#
totalPoop <- tapply(beren3$value[Poop], sum)#
numPoop <- tapply(beren3$value[Poop], length)
sum(Poop)
sum(Feeds)
totalPoop <- (Poop + Feeds)
sum(Poop, Feeds)
totalPoop <- sum(Poop, Feeds)
totalPoop
plot(as.numeric(names(totalPoop)), totalPoop, type="b", pch=16, xlab="amount of poop", ylab="amount of milk")
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
avgFeed <- tapply(beren3$value[Feeds], beren3$event[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$event[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$event[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$event[Feeds], length)
avgFeed
avgFeed <- tapply(beren3$value[Feeds], beren3$event[Poop], mean)
avgFeed <- tapply(beren3$event[Feeds], beren3$event[Poop], mean)
plot(as.numeric(names(totalPoop)), totalPoop, type="b", pch=16, xlab="amount of poop", ylab="amount of milk")
Poop
Feeds <- which(Data[,9] == 'bowel','bottle')
Feeds
Poop
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(Poop)), Poop, type="b", pch=16, xlab="amount of poop", ylab="amount of milk"
Feeds
totalPoop <- sum(Poop, Feeds)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalPoop)), totalPoop, type="b", pch=16, xlab="amount of poop", ylab="amount of milk"
plot(as.numeric(names(totalPoop)), totalPoop, type="b", pch=16, xlab="amount of poop", ylab="amount of milk")
Poop <- which(beren3$event == 'bowel')
totalPoop <- which(Data[,9] == 'bowel','bottle')
totalPoop <- sum(Poop, Feeds)
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalPoop)), totalPoop, type="b", pch=16, xlab="amount of poop", ylab="amount of milk")
setwd('~/Desktop/Evolution/Tasks/Task_02')#
Data <- read.csv('http://jonsmitchell.com/data/beren.csv',stringsAsFactors=F)#
write.csv(Data, 'rawdata.csv', quote=F)#
Data#
length(Data)#
nrow(Data)#
ncol(Data)#
colnames(Data)#
#The data columns are year, month, day, dotw, start_hour, start_minute, end_hour, end_minute, event, value, units, and caregiver#
head(Data)#
#Data[1,] shows the data for all of row one. Data[2,] shows the data for all of row two. Data[1:3,] shows all of the data for rows one, two, and three. Data[1:3, 4] shows the column data of column four for rows one, two, and three. Data[1:5, 1:3] shows the column data of columns one, two, and three for rows one, two, three, four, and five.#
Data[1,]#
Data[2,]#
Data[1:3,]#
Data[1:3, 4]#
Data[1:5, 1:3]#
#Data[257, 1:3]#
Feeds <- which(Data[,9] == 'bottle')#
berenMilk <- Data[Feeds,]#
head(berenMilk)#
#There are six rows in this new object, and each row represents an entry dealing with the amount of ounces he had from a bottle. #
Feeds <- which(Data[,'event'] == 'bottle')#
Feeds <- which(Data$event == 'bottle')#
#All three of these ways of finding the same events regarding the bottle are the same because they are just different ways of doing the exact same command. Data in column nine shows if he received a bottle. The event column and column nine are the same so this justifies the next way of getting the same result, and the $event also refers to the event column (column 9). #
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d" , origin = "2019-04-18")#
Data$age <- dateID[which(Data$event == 'birth')]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
head(beren)#
head(beren2)#
head(beren3)#
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)#
#Question 1: I believe that Hypothesis 3 is testable with the data that is given. The amount of milk Beren drinks in a day has increased over time. We have all the information needed to determine if this is true. Hypotheses 1 and 2 are not testable in this situation because Beren's weight and amount of time that he naps are not given. #
Feeds <- which(beren3$event == "bottle")#
avgMilk <- mean (beren3$value[Feeds])#
head(avgMilk)#
#Beren eats an average of 2.36677 ounces of milk at one sitting. #
#The units of milk are ounces.#
#The value column from the beren3 object was used because it shows the numbers that related to the data from "bottle" that was used when "Feeds" was created. #
#The set of square brackets with "Feeds" inside it was used to indicate what is located inside of the "Feeds" vector. This is important because it was used to find the mean of all the parts within "Feeds".#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)#
?cor#
cor(beren3$value[Feeds], beren3$age[Feeds])#
cor.test(beren3$value[Feeds], beren3$age[Feeds])#
berenCor <- cor.test(beren3$value[Feeds], beren3$age[Feeds])#
summary(berenCor)#
berenANOVA <- aov(beren3$value[Feeds] ~ beren3$caregiver[Feeds])#
boxplot(beren3$value[Feeds] ~ beren3$caregiver[Feeds], xlab = "who gave the bottle", ylab = "amount of milk consumed (oz)")#
?par#
#las=1 edited the style of the axis labels to always horizontal. mar=c(5,5,1,1) gives the number of lines of margin to be specifies on the four sides of the plot, hence why there are four numerical values. mgp=c(2, 0.5, 0) represents the values for the margin line for the axis title, axis labels, and axis line. tck=-0.01 represents the length of tick marks as a fraction of the smaller of the width or height of the plotting region. #
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
pdf("r02b-totalMilkByDay.pdf", height = 4, width = 4)#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="age in days", ylab="ounces of milk")#
abline(h=mean(totalFeed), lty=2, col='red')#
dev.off()
unique(beren3$event)
Feeds
Naps
Naps <- which(Data[,9] == 'nap')
Naps <- which(Data[,9] == 'nap')#
beren4 <- beren3[Naps,]#
beren4#
startHour <- (beren4$start_hour)#
startMin <- (beren4$start_minute)#
endHour <- (beren4$end_hour)#
endMin <- (beren4$end_minute)
Naps
Feeds
avgFeed <- tapply(beren3$value[Feeds], beren3$event[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$event[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$event[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$event[Feeds], length)
sum(Feeds, Naps)
plot(as.numeric(names(totalFeed)), totalFeed, type="b", pch=16, xlab="naps", ylab="bottles")
Bathroom <- which(Data[,9] == 'wet')
Feeds
avgFeed <- tapply(beren3$value[Wet], beren3$age[Wet], mean)#
varFeed <- tapply(beren3$value[Wet], beren3$age[Wet], var)#
totalFeed <- tapply(beren3$value[Wet], beren3$age[Wet], sum)#
numFeeds <- tapply(beren3$value[Wet], beren3$age[Wet], length)
Wet <- which(Data[,9] == 'wet')
avgFeed <- tapply(beren3$value[Wet], beren3$age[Wet], mean)#
varFeed <- tapply(beren3$value[Wet], beren3$age[Wet], var)#
totalFeed <- tapply(beren3$value[Wet], beren3$age[Wet], sum)#
numFeeds <- tapply(beren3$value[Wet], beren3$age[Wet], length)
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d" , origin = "2019-04-18")#
Data$age <- dateID[which(Data$event == 'birth')]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]
avgWet <- mean(beren3$wet)
cor(beren3$value[Wet], beren3$age[Wet])
cor(beren3$value[Feeds], beren3$age[Feeds])
cor(beren3$value[Wet], beren3$age[Wet])
berenMilk <- Data[Feeds,]#
head(berenMilk)#
#There are six rows in this new object, and each row represents an entry dealing with the amount of ounces he had from a bottle. #
Feeds <- which(Data[,'event'] == 'bottle')#
Feeds <- which(Data$event == 'bottle')#
#All three of these ways of finding the same events regarding the bottle are the same because they are just different ways of doing the exact same command. Data in column nine shows if he received a bottle. The event column and column nine are the same so this justifies the next way of getting the same result, and the $event also refers to the event column (column 9). #
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d" , origin = "2019-04-18")#
Data$age <- dateID[which(Data$event == 'birth')]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
head(beren)#
head(beren2)#
head(beren3)#
write.csv(beren3, 'beren_new.csv', quote=F, row.names=FALSE)#
#Question 1: I believe that Hypothesis 3 is testable with the data that is given. The amount of milk Beren drinks in a day has increased over time. We have all the information needed to determine if this is true. Hypotheses 1 and 2 are not testable in this situation because Beren's weight and amount of time that he naps are not given. #
Feeds <- which(beren3$event == "bottle")#
avgMilk <- mean (beren3$value[Feeds])#
head(avgMilk)#
#Beren eats an average of 2.36677 ounces of milk at one sitting. #
#The units of milk are ounces.#
#The value column from the beren3 object was used because it shows the numbers that related to the data from "bottle" that was used when "Feeds" was created. #
#The set of square brackets with "Feeds" inside it was used to indicate what is located inside of the "Feeds" vector. This is important because it was used to find the mean of all the parts within "Feeds".#
avgFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], mean)#
varFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], var)#
totalFeed <- tapply(beren3$value[Feeds], beren3$age[Feeds], sum)#
numFeeds <- tapply(beren3$value[Feeds], beren3$age[Feeds], length)
Wet <- which(Data[,9] == 'wet')#
avgWet <- tapply(beren3$value[Wet], beren3$age[Wet], mean)#
varWet <- tapply(beren3$value[Wet], beren3$age[Wet], var)#
totalWet <- tapply(beren3$value[Wet], beren3$age[Wet], sum)#
numWet <- tapply(beren3$value[Wet], beren3$age[Wet], length)#
dayID <- apply(Data, 1, function(x) paste(x[1:3], collapse='-'))#
dateID <- sapply(dayID, as.Date, format = "%Y-%m-%d" , origin = "2019-04-18")#
Data$age <- dateID[which(Data$event == 'birth')]#
head(Data)#
beren2 <- Data#
beren3 <- beren2[order(beren2$age) ,]#
cor(beren3$value[Wet], beren3$age[Wet])#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)
cor(beren3$value[Wet], beren3$age[Wet])#
par(las=1, mar=c(5,5,1,1), mgp=c(2, 0.5, 0), tck=-0.01)#
plot(as.numeric(names(totalWet)), totalWet, type="b", pch=16, xlab="age", ylab="wet")
unique(beren3$event)
Wet
Feeds
totalFeeds <- sum(Feeds)
totalFeeds
totalWets <- sum(Wet)
<- sum(Wet)
totalWets <- sum(Wet)
totalWets
plot(totalWets)
plot(totalFeeds)
plot(totalWets, type="o", col="blue", ylim=c(0,200000))
plot(totalWets, type="o", col="blue", ylim=c(0,200000))
plot(totalWets, type="o", col="blue", ylim=c(100000,400000))
plot(totalWets, type="o", col="blue", ylim=c(100000,400000))#
plot(totalFeeds, type="o", col="red", ylim=c(100000,400000))
g_range <- range(100000, totalWets, totalFeeds)
plot(totalWets, type "o", col="blue", ylim=g_range, axes=FALSE, ann=FALSE)
plot(totalWets, type="o", col="blue", ylim=g_range, axes=FALSE, ann=FALSE)
plot(totalWets, type="o", col="blue", ylim=c(100000,400000))
plot(totalFeeds, type="o", col="blue", ylim=c(100000,400000))
plot(totalWets,totalFeeds)
plot(totalWets,totalFeeds)
plot(totalWets,totalFeeds)
plot(totalFeeds,totalWets)
